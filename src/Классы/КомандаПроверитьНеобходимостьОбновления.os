///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды Deploy
//
///////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать 1commands
#Использовать json

Перем Лог;

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт
	
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяБазы", "Имя информационной базы, которую нужно обновить (в соответствии с файлом настроек)");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт

	Лог = Приложение.ПолучитьЛог();
	Лог.Отладка("Выполняется проверка необходимости обновления базы.");

	КаталогСборки = ПараметрыКоманды.Получить("TEMP_WORKDIR");
	ИнформационнаяБаза = ПараметрыКоманды["ИмяБазы"];
	Если ИнформационнаяБаза = Неопределено Тогда
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Попытка выполнения команды без указания имени базы");
	КонецЕсли;

	КаталогВременныхФайловСборки = ОбъединитьПути(КаталогСборки, ИнформационнаяБаза);
	ОбщиеМетоды.ПредоставитьПустойКаталог(КаталогВременныхФайловСборки);
	Лог.Отладка(СтрШаблон("Создан временный каталог сборки: %1", КаталогВременныхФайловСборки));
	
	// Получить версию релизного хранилища, установленного на рабочую базу
	СтрокаСоединенияСРабочейБазой = ОбщиеМетоды.ПолучитьСтрокуСоединенияСРабочейБазой(ПараметрыКоманды);
	ПараметрыАвторизацииРабочаяБаза = ОбщиеМетоды.ПолучитьПараметрыАвторизацииВРабочейБазе(ПараметрыКоманды);

	Лог.Отладка("Устанавливаю COM соединение с рабочей базой для получения номера текущй версии хранилища Release");
	COMСоединение = ОбщиеМетоды.ПолучитьCOMСоединениеСБазой(ПараметрыКоманды, СтрокаСоединенияСРабочейБазой);

	Если COMСоединение = Неопределено Тогда
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось установить создать com-подключение к базе с переданными параметрами");	
	КонецЕсли;

	НомерВерсииХранилища = COMСоединение.реми_Деплой.ПолучитьНомерВерсииХранилища();
	ОсвободитьОбъект(COMСоединение);
	COMСоединение = Неопределено;
	ВыполнитьСборкуМусора();

	Если НЕ ЗначениеЗаполнено(НомерВерсииХранилища) ИЛИ НомерВерсииХранилища = 0 Тогда
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось определить текущую версию release хранилища рабочей базы");
	КонецЕсли;

	Лог.Отладка("Текущая версия хранилища Release рабочей базы " + НомерВерсииХранилища + ". COM соединение освобождено.");

	МассивВерсийКДеплою = ОбщиеМетоды.ПолучитьМассивВерсийХранилищаКДеплою(НомерВерсииХранилища + 1, ПараметрыКоманды);	
	МассивНомеровДляЗаписиВФайлVerisons = Новый Массив();	

	Если МассивВерсийКДеплою.Количество() Тогда
		// подготовим файл для сохранения номеров версий
		Лог.Отладка(СтрШаблон("В хранилище присутствует актуальный для обновления коммит ""%1""", НомерВерсииХранилища + 1));
		ИмяФайла = "versions";	
		ВерсияДляДеплоя = МассивВерсийКДеплою[0];
		ДанныеЗаписи = Новый Структура;
		ДанныеЗаписи.Вставить("ВерсияХранилища", ВерсияДляДеплоя);
		Если НЕ ОбщиеМетоды.СохранитьСтруктуруВФайлJSON(ОбъединитьПути(КаталогВременныхФайловСборки, ИмяФайла), ДанныеЗаписи, Истина) Тогда
			Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось сохранить номер версии хранилища в файл");
		КонецЕсли;
	Иначе
		Лог.Отладка("Конфигурация Информационной базы находится в актуальном состоянии. Обновление не требуется.");		
	КонецЕсли;

	Возврат Приложение.РезультатыКоманд().Успех;
	
КонецФункции // ВыполнитьКоманду