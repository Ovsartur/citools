///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль с реализацией работы команды help
//
///////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать asserts
#Использовать v8storage
#Использовать v8rac
#Использовать v8runner
#Использовать tempfiles

Перем Лог;

Процедура НастроитьКоманду(Знач Команда, Знач Парсер) Экспорт

	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяБазы", "Имя информационной базы, которую нужно проверить");
	
КонецПроцедуры // НастроитьКоманду

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие - Соответствие ключей командной строки и их значений
//   Приложение - Модуль - Модуль менеджера приложения
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды, Знач Приложение) Экспорт
	
	Лог = Приложение.ПолучитьЛог();
	Лог.Информация("Запуск обработчиков обновления");

	КаталогСборки = ПараметрыКоманды.Получить("TEMP_WORKDIR");
	ИнформационнаяБаза = ПараметрыКоманды["ИмяБазы"];
	Если ИнформационнаяБаза = Неопределено Тогда
		Приложение.ЗавершитьРаботуПриложенияСОшибкой("Попытка выполнения команды без указания имени базы");
	КонецЕсли;

	СтрокаСоединенияСРабочейБазой = ОбщиеМетоды.ПолучитьСтрокуСоединенияСРабочейБазой(ПараметрыКоманды);
	ПараметрыАвторизацииРабочаяБаза = ОбщиеМетоды.ПолучитьПараметрыАвторизацииВРабочейБазе(ПараметрыКоманды);

	Если (ПараметрыКоманды.Получить("useordinaryapp") <> Неопределено) И (ПараметрыКоманды["useordinaryapp"] = "true") Тогда
		КодДоступа = "";
		Если ЗначениеЗаполнено(ПараметрыКоманды["uccode"]) Тогда
			КодДоступа = СтрШаблон("/UC %1", ПараметрыКоманды["uccode"]);
		КонецЕсли;
		СтрокаСоединенияСРабочейБазой = СтрШаблон("%1 %2 %3", СтрокаСоединенияСРабочейБазой, КодДоступа, "/DisableStartupMessages");
		Конфигуратор = Новый УправлениеКонфигуратором();
		Конфигуратор.УстановитьКонтекст(СтрокаСоединенияСРабочейБазой, ПараметрыАвторизацииРабочаяБаза.Логин, ПараметрыАвторизацииРабочаяБаза.Пароль);
		Попытка
			Конфигуратор.ЗапуститьВРежимеПредприятия("ПропуститьПроверкуЛегальностиОбновления;ЗавершитьРаботуПослеОбновления", Ложь);
		Исключение
			Приложение.ЗавершитьРаботуПриложенияСОшибкой(СтрШаблон("Не удалось обновить конфигурацию базы данных. Описание: %1", ОписаниеОшибки()));
		КонецПопытки;
	Иначе
		Лог.Отладка("Устанавливается COM соединение с рабочей базой...");
		COMСоединение = ОбщиеМетоды.ПолучитьCOMСоединениеСБазой(ПараметрыКоманды, СтрокаСоединенияСРабочейБазой);
		Если COMСоединение = Неопределено Тогда
			Приложение.ЗавершитьРаботуПриложенияСОшибкой("Не удалось установить\создать com-подключение к базе с переданными параметрами");
		КонецЕсли;
	
		Лог.Отладка("COM соединение с рабочей базой установлено...");
		РезультатСтрокой = COMСоединение.реми_Деплой.ОбновлениеИнформационнойБазыПриЗавершенииАвтодеплоя();
		Парсер = Новый ПарсерJSON();
		РезультатЗапускаОбработчиков = Парсер.ПрочитатьJSON(РезультатСтрокой,,, Истина);
		Если РезультатЗапускаОбработчиков.Ошибка Тогда
			Приложение.ЗавершитьРаботуПриложенияСОшибкой(РезультатЗапускаОбработчиков.Описание);
		КонецЕсли;
		Лог.Отладка("--> " + РезультатЗапускаОбработчиков.Описание);
	
		Лог.Отладка("Обход проверки легальности получения обновлений...");
		Результат = COMСоединение.реми_Деплой.ОбходПроверкиЛегальностиПолученияОбновления();
		Лог.Отладка("--> " + Результат);
	
		ОсвободитьОбъект(COMСоединение);
		COMСоединение = Неопределено;
		ВыполнитьСборкуМусора();
		Лог.Отладка("COM соединение освобождено");	
	КонецЕсли;
				
	Возврат Приложение.РезультатыКоманд().Успех;
		
КонецФункции // ВыполнитьКоманду
