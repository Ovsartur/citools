#Использовать logos
#Использовать v8storage
#Использовать v8runner
#Использовать json

Перем Лог;

Функция ПолучитьЛог()
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ПараметрыПриложения.ИмяЛогаСистемы());
	КонецЕсли;
	Возврат Лог;	
КонецФункции


Процедура ЗаполнитьЗначенияИзПеременныхОкружения(ЗначенияПараметров, Знач СоответствиеПеременных) Экспорт

	ПолучитьЛог();

	Для каждого Элемент Из СоответствиеПеременных Цикл
		ЗначениеПеременной = ПолучитьПеременнуюСреды(ВРег(Элемент.Значение));
		Если ЗначениеПеременной <> Неопределено Тогда
			Если ЗначениеПеременной = """""" Или ЗначениеПеременной = "''" Тогда
				ЗначениеПеременной = "";
			КонецЕсли;
			ЗначенияПараметров.Вставить(Элемент.Ключ, ЗначениеПеременной);

			Лог.Отладка("Из переменных среды получен параметр: <%1> = <%2>", Элемент.Ключ, ЗначениеПеременной);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьКомандуОС(КоманднаяСтрока, Описание="") Экспорт
	
	Команда = Новый Команда;
	Команда.ПоказыватьВыводНемедленно(Истина);
	Лог.Отладка(Описание);
	Лог.Отладка(КоманднаяСтрока);
	Команда.УстановитьСтрокуЗапуска(КоманднаяСтрока);
	КодВозврата = Команда.Исполнить();
	ВыводКоманды = Команда.ПолучитьВывод();
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение СтрШаблон("В результате выполнения команды был получен ненулевой код возврата %1. 
			|%2", КодВозврата, ВыводКоманды);
	КонецЕсли;		

КонецПроцедуры

Функция ПолныйПуть(Знач Путь, Знач КаталогПроекта = "") Экспорт
	Перем ФайлПуть;
	
	Если ПустаяСтрока(Путь) Тогда 
		Возврат Путь;
	КонецЕсли;

	Если ПустаяСтрока(КаталогПроекта) Тогда
		КаталогПроекта = ПараметрыПриложения.КорневойПутьПроекта;
	КонецЕсли;

	Если Лев(Путь, 1) = "." Тогда 
		Путь = ОбъединитьПути(КаталогПроекта, Путь);
	КонецЕсли;

	Возврат Путь;
	
КонецФункции //ПолныйПуть()

Функция ОбернутьПутьВКавычки(Знач Путь) Экспорт

	Результат = Путь;
	Если Прав(Результат, 1) = "\" ИЛИ Прав(Результат, 1) = "/" Тогда
		Результат = Лев(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;

	Результат = """" + Результат + """";

	Возврат Результат;

КонецФункции


Процедура ДополнитьСоответствиеСУчетомПриоритета(КоллекцияПриемник, Знач КоллекцияИсточник) Экспорт

	Если КоллекцияИсточник = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Для Каждого Элемент из КоллекцияИсточник Цикл 
		Значение = КоллекцияПриемник.Получить(Элемент.Ключ);
		Если Значение = Неопределено ИЛИ ПустаяСтрока(Значение) Тогда
			КоллекцияПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") И НЕ Значение Тогда
			Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда 
				Если Элемент.Значение = "1" ИЛИ Нрег(Элемент.Значение) = "истина" ИЛИ Нрег(Элемент.Значение) = "true" Тогда
					КоллекцияПриемник.Вставить(Элемент.Ключ, Истина);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Булево") И Элемент.Значение Тогда
				КоллекцияПриемник.Вставить(Элемент.Ключ, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры //ДополнитьСоответствиеСУчетомПриоритета

// Устанавливает внешнее соединение с информационной базой согласно переданному варианту работы ИБ и возвращает указатель на это соединение
// 
// Параметры:
//	ПараметрыВыполнения - набор параметров выполнения команды
//  ВариантРаботыИнформационнойБазы - (Число)  Вариант работы информационной базы: 0 – файловый; 1 – клиент-серверный
//  СтрокаСообщенияОбОшибке (необязательный) – Строка – если в процессе установки внешнего соединения возникает ошибка,
//                                                     то подробное описание ошибки помещается в этот параметр
//
// Возвращаемое значение:
//  Тип: COM-объект, Неопределенно.
//  в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//  в случае ошибки возвращается Неопределенно.
//
Функция УстановитьВнешнееСоединение(ПараметрыВыполнения, ВариантРаботыИнформационнойБазы, СтрокаСообщенияОбОшибке = "") Экспорт
	
	// возвращаемое значение функции (COM-объект)
	Connection = Неопределено;

	Коннектор = "V83.ComConnector";
	Попытка
		COMConnector = Новый COMОбъект(Коннектор);
	Исключение
		СтрокаСообщенияОбОшибке = СтрШаблон("При установке внешнего соединения произошла ошибка: %1"
			,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;

	Если ВариантРаботыИнформационнойБазы = 0 Тогда
		// это файловая база
		Если ПустаяСтрока(ПараметрыВыполнения.Получить("base_product_path")) Тогда			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задано месторасположение каталога информационной базы.'");
			Возврат Неопределено;			
		КонецЕсли;
		
		СтрокаСоединения = СтрШаблон("File = ""%1""; Usr = ""%2""; Pwd = ""%3""; UC = %4"
			, ПараметрыВыполнения.Получить("base_product_path")
			, ПараметрыВыполнения.Получить("base_product_user")
			, ПараметрыВыполнения.Получить("base_product_pwd")
			, ПараметрыВыполнения.Получить("uccode"));
		
	Иначе // Клиент-серверный вариант работы информационной базы
		
		СтрокаСоединения = СтрШаблон("Srvr = %1; Ref = %2; Usr = ""%3""; Pwd = ""%4""; UC = %5"
			, ПараметрыВыполнения.Получить("cluster_name")
			, ПараметрыВыполнения.Получить("base_product_name")
			, ПараметрыВыполнения.Получить("base_product_user")
			, ПараметрыВыполнения.Получить("base_product_pwd")
			, ПараметрыВыполнения.Получить("uccode"));		

	КонецЕсли;

	Попытка
		Connection = COMConnector.Connect(СтрокаСоединения);
	Исключение
		СтрокаСообщенияОбОшибке = СтрШаблон("При установке внешнего соединения произошла ошибка: %1"
			,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Connection;

КонецФункции

Функция ПолучитьСтрокуСоединенияСРабочейБазой(ПараметрыВыполнения) Экспорт
	
	СтрокаСоединенияСРабочейБазой="";
	Если ПараметрыВыполнения.Получить("base_product_path") = Неопределено 
		ИЛИ ПустаяСтрока(ПараметрыВыполнения.Получить("base_product_path")) Тогда
		СтрокаСоединенияСРабочейБазой = "/S"+ПараметрыВыполнения.Получить("cluster_name")
			+ПолучитьРазделительПути()
			+ПараметрыВыполнения.Получить("base_product_name");
	Иначе
		СтрокаСоединенияСРабочейБазой = "/F"+ОбернутьПутьВКавычки(ПараметрыВыполнения.Получить("base_product_path"));
	КонецЕсли;

	Возврат СтрокаСоединенияСРабочейБазой;

КонецФункции

Функция ПолучитьПараметрыАвторизацииВРабочейБазе(ПараметрыВыполнения) Экспорт

	ПараметрыАвторизацииРабочаяБаза = Новый Структура;
	ПараметрыАвторизацииРабочаяБаза.Вставить("Логин", ПараметрыВыполнения.Получить("base_product_user"));
	ПараметрыАвторизацииРабочаяБаза.Вставить("Пароль", ПараметрыВыполнения.Получить("base_product_pwd"));

	Возврат ПараметрыАвторизацииРабочаяБаза

КонецФункции

Функция ПолучитьCOMСоединениеСБазой(ПараметрыВыполнения, СтрокаСоединенияСРабочейБазой) Экспорт

	ВариантРаботыИБКлиентСервер = Число(СтрНачинаетсяС(СтрокаСоединенияСРабочейБазой, "/S"));

	СтрокаСообщенияОбОшибке = "";
	Попытка
		COMСоединение = УстановитьВнешнееСоединение(ПараметрыВыполнения
			, ВариантРаботыИБКлиентСервер
			, СтрокаСообщенияОбОшибке);	
	Исключение
		ВызватьИсключение СтрокаСообщенияОбОшибке;	
	КонецПопытки;	

	Возврат COMСоединение;

КонецФункции

Процедура УстановитьИОчиститьРабочийКаталогСкрипта(ПараметрыВыполнения) Экспорт
	
	ЗначениеПеременной = ПараметрыВыполнения["TEMP_WORKDIR"];
	Ожидаем.Что(ЗначениеЗаполнено(ЗначениеПеременной) И НЕ ПустаяСтрока(ЗначениеПеременной), 
	"Ожидаем, что каталог сборки будет передан в настройках в переменной 'TEMP_WORKDIR', но такого параметра в настройках нет!").ЭтоИстина();

	Файл = Новый Файл(ЗначениеПеременной);
	Если Файл.Существует() и Файл.ЭтоКаталог() Тогда
		УдалитьФайлы(ЗначениеПеременной,"*");
	Иначе
		УдалитьФайлы(ЗначениеПеременной);
		СоздатьКаталог(ЗначениеПеременной);	
	КонецЕсли;

	УстановитьПеременнуюСреды("VPACKMAN_WORKDIR", ЗначениеПеременной);
	
КонецПроцедуры

Функция ПолучитьМассивВерсийХранилищаКДеплою(НомерВерсииХранилища, ПараметрыВыполнения) Экспорт

	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПараметрыВыполнения.Получить("storage_release_path"));
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(
		ПараметрыВыполнения.Получить("storage_release_user"),
		ПараметрыВыполнения.Получить("storage_release_pwd")
	);
	ХранилищеКонфигурации.ПрочитатьХранилище(НомерВерсииХранилища);
	ТаблицаИсторииХранилища = ХранилищеКонфигурации.ПолучитьТаблицуВерсий();
	
	ВременныеФайлы.УдалитьФайл(ХранилищеКонфигурации.ПолучитьУправлениеКонфигуратором().КаталогСборки());
	
	Возврат ТаблицаИсторииХранилища.ВыгрузитьКолонку("Номер");

КонецФункции

Функция СохранитьСтруктуруВФайлJSON(Путь, Источник, СоздатьПриОтсутствии=Истина) Экспорт

	ОбъектФайл = Новый Файл(Путь);

	ФайлСуществует = ОбъектФайл.Существует() и ОбъектФайл.ЭтоФайл();
	
	Если НЕ ФайлСуществует И НЕ СоздатьПриОтсутствии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПарсерСтрокиJSON = Новый ПарсерJSON();

	Если ФайлСуществует Тогда
		ЧтениеТекста = Новый ЧтениеТекста(Путь, КодировкаТекста.UTF8);
		СтрокаJSON = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();

		Попытка
			СтруктураДанных = ПарсерСтрокиJSON.ПрочитатьJSON(СтрокаJSON,,,Истина);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		Для Каждого Строка Из Источник Цикл
			Если СтруктураДанных.Свойство(Строка.Ключ) Тогда
				СтруктураДанных[Строка.Ключ] = Строка.Значение;
			Иначе
				СтруктураДанных.Вставить(Строка.Ключ, Строка.Значение);
			КонецЕсли;
		КонецЦикла;	
		СтрокаJSON = ПарсерСтрокиJSON.ЗаписатьJSON(СтруктураДанных);
	Иначе
		СтрокаJSON = ПарсерСтрокиJSON.ЗаписатьJSON(Источник);
	КонецЕсли;

	ЗаписьТекста = Новый ЗаписьТекста(Путь, КодировкаТекста.UTF8);
	Попытка
		ЗаписьТекста.Записать(СтрокаJSON);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ЗаписьТекста.Закрыть();

	Возврат Истина;

КонецФункции

Функция ЗагрузитьФайлВСтруктуру(Путь) Экспорт

	ОбъектФайл = Новый Файл(Путь);

	ФайлСуществует = ОбъектФайл.Существует() и ОбъектФайл.ЭтоФайл();

	Если НЕ ФайлСуществует Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПарсерСтрокиJSON = Новый ПарсерJSON();
	ЧтениеТекста = Новый ЧтениеТекста(Путь);

	СтрокаJSON = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат ПарсерСтрокиJSON.ПрочитатьJSON(СтрокаJSON,,,Истина);

КонецФункции

Процедура ВыгрузитьВерсиюКонфигурацииИзХранилища(ПараметрыХранилища, ПутьКФайлуКонфигурации, НомерВерсииХранилища) Экспорт
	
	ХранилищеКонфигурации = Новый МенеджерХранилищаКонфигурации();

	ХранилищеКонфигурации.УстановитьПутьКХранилищу(ПараметрыХранилища["storage_release_path"]);
	ХранилищеКонфигурации.УстановитьПараметрыАвторизации(ПараметрыХранилища["storage_release_user"], ПараметрыХранилища["storage_release_pwd"]);

	Попытка
		ХранилищеКонфигурации.СохранитьВерсиюКонфигурацииВФайл(НомерВерсииХранилища, ПутьКФайлуКонфигурации);
	Исключение
		ХранилищеКонфигурации.ОтключитьсяОтХранилища();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	ХранилищеКонфигурации.ОтключитьсяОтХранилища();

КонецПроцедуры

Процедура СоздатьФайлПоставкиИзФайлаКонфигурации(ПутьКФайлуКонфигурации, ПутьФайлПолнойПоставки) Экспорт

	Конфигуратор = Новый УправлениеКонфигуратором();

	Попытка
		Конфигуратор.ЗагрузитьКонфигурациюИзФайла(ПутьКФайлуКонфигурации);
		Конфигуратор.ОбновитьКонфигурациюБазыДанных();
		Конфигуратор.СоздатьФайлыПоставки(ПутьФайлПолнойПоставки);
	Исключение
		Конфигуратор.УдалитьВременнуюБазу();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	// удаление временной базы
	Конфигуратор.УдалитьВременнуюБазу();

КонецПроцедуры

Функция ОтфильтроватьСтрокиТаблицы(СписокСоединений, Фильтр) Экспорт

	Если СписокСоединений.Количество() = 0 ИЛИ Фильтр.Количество() = 0 Тогда
		Возврат СписокСоединений;
	КонецЕсли;

	ВременнаяТаблица = СписокСоединений.Скопировать();
	ВременнаяТаблица.Очистить();

	ПолеПоиска = Неопределено;
	КоллекцияЗначенийПоиска = Неопределено;

	Для Каждого КлючЗначениеФильтра Из Фильтр Цикл
		ПолеПоиска 				= КлючЗначениеФильтра.Ключ;
		КоллекцияЗначенийПоиска = КлючЗначениеФильтра.Значение;
	КонецЦикла;

	Для Каждого ЗначениеПоиска Из КоллекцияЗначенийПоиска Цикл
		НайденныеСтроки = СписокСоединений.НайтиСтроки(Новый Структура(ПолеПоиска, ЗначениеПоиска));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;

	Возврат ВременнаяТаблица;
	
КонецФункции

// Возвращает коллекцию параметров кластера серверов для принудительного завершения зависших сеансов
//
// Параметры:
//	ПользовательКластера - Строка
//	ПарольПользователяКластера - Строка
//	ИдентификаторЛокальногоКластера - Строка
//	ПутьКлиентаАдминистрирования - Строка - путь к утилите rac
//	Хост - Строка
//	Порт - Строка
//	ПринудительноеЗавершение - Булево - принудительно завершать проблемные процессы
//  ПериодПринудительногоЗавершения  - Число - период принудительного завершения (в секундах)
//  ПериодПерезапуска - Число - период перезапуска рабочих процессов кластера (в секундах)
//
// Возвращаемое значение:
//   Структура - Коллекция параметров для формирования коммандной строки
//
Функция ПараметрыПерезапускаРабочихПроцессовКластера(
	ПользовательКластера, 
	ПарольПользователяКластера, 
	ИдентификаторЛокальногоКластера,
	ПутьКлиентаАдминистрирования,
	Хост,
	Порт,
	ПринудительноеЗавершение = Неопределено, 
	ПериодПринудительногоЗавершения = Неопределено, 
	ПериодПерезапуска = Неопределено) Экспорт
	
	Параметры = Новый Массив;

	Параметры.Добавить(СтрШаблон("""%1""", ПутьКлиентаАдминистрирования));

	Параметры.Добавить("cluster");
	Параметры.Добавить("update");

	Параметры.Добавить(СтрШаблон("--cluster=%1", ИдентификаторЛокальногоКластера));
	Параметры.Добавить(СтрШаблон("--agent-user=%1", ПользовательКластера));
	Параметры.Добавить(СтрШаблон("--agent-pwd=%1", ПарольПользователяКластера));

	Если ПринудительноеЗавершение <> Неопределено Тогда
		Если ТипЗнч(ПринудительноеЗавершение) = Тип("Булево") Тогда
			Если ПринудительноеЗавершение Тогда
				Параметры.Добавить(СтрШаблон("--kill-problem-processes=%1", "yes"));
			Иначе
				Параметры.Добавить(СтрШаблон("--kill-problem-processes=%1", "no"));
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ПринудительноеЗавершение) = Тип("Строка") Тогда
			Если ПринудительноеЗавершение = "1" Тогда
				Параметры.Добавить(СтрШаблон("--kill-problem-processes=%1", "yes"));
			Иначе
				Параметры.Добавить(СтрШаблон("--kill-problem-processes=%1", "no"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПериодПринудительногоЗавершения <> Неопределено Тогда
		Если Число(ПериодПринудительногоЗавершения) > 0 Тогда
			Параметры.Добавить(СтрШаблон("--lifetime-limit=%1", ПериодПринудительногоЗавершения));
		Иначе
			Параметры.Добавить("--lifetime-limit=0");
		КонецЕсли;
	КонецЕсли;

	Если ПериодПерезапуска <> Неопределено Тогда
		Если Число(ПериодПерезапуска) > 0 Тогда
			Параметры.Добавить(СтрШаблон("--expiration-timeout=%1", ПериодПерезапуска));
		Иначе
			Параметры.Добавить("--expiration-timeout=0");
		КонецЕсли;
	КонецЕсли;

	Параметры.Добавить(СтрШаблон("%1:%2", Хост, Порт));

	Возврат Параметры;

КонецФункции

Функция ПолучитьНастройкиКластераПоСтроке(НастройкиСтрокой) Экспорт

	НастройкиКластера = Новый Структура;

	КоллекцияНастроек = СтрРазделить(НастройкиСтрокой, Символы.ВК + Символы.ПС);

	Для Каждого СтрокаНастройки Из КоллекцияНастроек Цикл

		Настройка = СтрРазделить(СтрокаНастройки, ":");

		Если Настройка.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;

		Ключ = СтрЗаменить(СокрЛП(Настройка[0]), "-", "_");
		Значение = СокрЛП(Настройка[1]);

		НастройкиКластера.Вставить(Ключ, Значение);

	КонецЦикла;

	Возврат НастройкиКластера;

КонецФункции

Процедура ПредоставитьПустойКаталог(Знач Путь) Экспорт
	
	ОбъектФайл = Новый Файл(Путь);

	Если ОбъектФайл.Существует() и ОбъектФайл.ЭтоФайл() Тогда
		ВызватьИсключение "Не удается создать каталог " + Путь + ". По данному пути уже существует файл.";
	КонецЕсли;

    Если Не ОбъектФайл.Существует() Тогда
        СоздатьКаталог(Путь);
	КонецЕсли;
	
	УдалитьФайлы(Путь, ПолучитьМаскуВсеФайлы());

КонецПроцедуры


Лог = ПолучитьЛог();